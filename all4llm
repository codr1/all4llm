#!/bin/bash

# Default source code file extensions
default_extensions=(
    "*.c" "*.h" "*.cpp" "*.hpp" "*.cc"    # C/C++
    "*.py" "*.pyw"                         # Python
    "*.js" "*.ts" "*.jsx" "*.tsx"         # JavaScript/TypeScript
    "*.go"                                 # Go
    "*.java"                               # Java
    "*.rs"                                 # Rust
    "*.rb"                                 # Ruby
    "*.php"                                # PHP
    "*.cs"                                 # C#
    "*.swift"                              # Swift
    "*.kt" "*.kts"                        # Kotlin
    "*.scala"                              # Scala
    "*.sh" "*.bash"                       # Shell scripts
    "*.md" "*.rst"                        # Documentation
    "*.sql"                               # SQL
    "*.xml" "*.json" "*.yaml" "*.yml"     # Data/Config files
    "*.lua"                               # Lua
    "*.toml"                              # TOML
    "*.conf" "*.config"                   # Config files
    "*.ini"                               # INI files
)

# Default excluded directories
default_excluded_dirs=(
    "node_modules"
    "venv"
    "__pycache__"
    ".git"
    "build"
    "dist"
)

check_clipboard_tool() {
    if command -v clip.exe >/dev/null 2>&1; then
        echo "clip.exe"
    elif command -v xclip >/dev/null 2>&1; then
        echo "xclip"
    elif command -v pbcopy >/dev/null 2>&1; then
        echo "pbcopy"
    fi
}

copy_to_clipboard() {
    local clipboard_tool=$(check_clipboard_tool)
    case "$clipboard_tool" in
        "clip.exe")
            clip.exe
            ;;
        "xclip")
            xclip -selection clipboard
            ;;
        "pbcopy")
            pbcopy
            ;;
        *)
            echo "Error: No clipboard tool found."
            return 1
            ;;
    esac
}

# Function to estimate tokens
estimate_tokens() {
    local char_count=$1
    echo $(( (char_count + 3) / 4 ))
}

# Display help message
show_help() {
    cat << 'EOF'
Usage: all4llm [OPTIONS] DIRECTORY

Assembles source code files from a directory into a single output, with clear file demarcation.
Useful for preparing code for Large Language Model analysis.

Options:
    -h, --help      Show this help message
    -r, --recursive Include subdirectories recursively
    -i, --include PATTERN
                    Include additional file pattern (can be used multiple times)
    -o, --output FILE
                    Write output to FILE instead of stdout
    -c, --clipboard Copy output to clipboard (requires xclip on Linux)
    --no-hidden     Skip hidden files and directories
    --list-defaults List default file extensions that are included
    --only PATTERN  Only include specified pattern (can be used multiple times, disables default extensions)
    -x, --exclude DIR
                    Exclude directory (can be used multiple times)
    --list-excluded List default excluded directories

By default, includes common source code files and excludes common build/dependency directories.
Use --list-defaults to see included extensions and --list-excluded to see excluded directories.

Examples:
    all4llm src/
    all4llm -r project/
    all4llm -r . -o project_code.txt --no-hidden
    all4llm . --only "*.py"
    all4llm . --only "file1.py" --only "file2.js" --only "config.json"
    all4llm . -i "*.conf" -i "*.cfg"
    all4llm . -c     # Copy output to clipboard
    all4llm . -x "vendor" -x "tmp"  # Exclude specific directories
EOF
    exit 0
}

# Function to list default extensions
list_defaults() {
    echo "Default included file extensions:"
    printf '%s\n' "${default_extensions[@]}" | sort
    exit 0
}

# Function to list default excluded directories
list_excluded() {
    echo "Default excluded directories:"
    printf '%s\n' "${default_excluded_dirs[@]}" | sort
    exit 0
}

# Initialize variables
recursive=false
output_file=""
no_hidden=false
declare -a include_patterns
declare -a exclude_dirs=("${default_excluded_dirs[@]}")
declare -a only_patterns
directory=""
copy_clipboard=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            ;;
        -r|--recursive)
            recursive=true
            shift
            ;;
        -i|--include)
            include_patterns+=("$2")
            shift 2
            ;;
        -o|--output)
            output_file="$2"
            shift 2
            ;;
        -c|--clipboard)
            copy_clipboard=true
            shift
            ;;
        --no-hidden)
            no_hidden=true
            shift
            ;;
        --list-defaults)
            list_defaults
            ;;
        --list-excluded)
            list_excluded
            ;;
        --only)
            only_patterns+=("$2")
            shift 2
            ;;
        -x|--exclude)
            exclude_dirs+=("$2")
            shift 2
            ;;
        *)
            directory="$1"
            shift
            ;;
    esac
done

# Check if directory is provided
if [ -z "$directory" ]; then
    echo "Error: No directory specified"
    show_help
fi

# Check if directory exists
if [ ! -d "$directory" ]; then
    echo "Error: Directory '$directory' does not exist"
    exit 1
fi

# Build exclude pattern for find command
build_exclude_pattern() {
    local pattern=""
    for dir in "${exclude_dirs[@]}"; do
        pattern="$pattern -name $dir -prune -o"
    done
    echo "$pattern"
}

# Function to check if file matches any pattern
matches_any_pattern() {
    local file="$1"
    local basename_file=$(basename "$file")
    
    # If --only patterns are specified, only check those patterns
    if [ ${#only_patterns[@]} -gt 0 ]; then
        for pattern in "${only_patterns[@]}"; do
            case "$basename_file" in
                $pattern) return 0 ;;
            esac
        done
        return 1
    fi
    
    # Check against default extensions
    for pattern in "${default_extensions[@]}"; do
        case "$basename_file" in
            $pattern) return 0 ;;
        esac
    done
    
    # Check against additional include patterns
    for pattern in "${include_patterns[@]}"; do
        case "$basename_file" in
            $pattern) return 0 ;;
        esac
    done
    
    return 1
}

# Function to process files
process_files() {
    local dir="$1"
    local temp_file=$(mktemp)
    local exclude_pattern=$(build_exclude_pattern)
    
    if [ "$recursive" = true ]; then
        eval "find '$dir' $exclude_pattern -type f -print0" | while IFS= read -r -d $'\0' file; do
            if [ "$no_hidden" = true ] && [[ $(basename "$file") == .* ]]; then
                continue
            fi
            
            if matches_any_pattern "$file"; then
                printf '<<<< FILE: %s >>>>\n' "$file" >> "$temp_file"
                cat "$file" 2>/dev/null >> "$temp_file" || echo "Error: Unable to read file $file" >> "$temp_file"
                printf '<<<< END FILE: %s >>>>\n\n' "$file" >> "$temp_file"
            fi
        done
    else
        find "$dir" -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' file; do
            if [ "$no_hidden" = true ] && [[ $(basename "$file") == .* ]]; then
                continue
            fi
            
            if matches_any_pattern "$file"; then
                printf '<<<< FILE: %s >>>>\n' "$file" >> "$temp_file"
                cat "$file" 2>/dev/null >> "$temp_file" || echo "Error: Unable to read file $file" >> "$temp_file"
                printf '<<<< END FILE: %s >>>>\n\n' "$file" >> "$temp_file"
            fi
        done
    fi

    # Get character count for token estimation
    local char_count=$(wc -c < "$temp_file")
    local token_estimate=$(estimate_tokens "$char_count")

    # Output based on destination
    if [ "$copy_clipboard" = true ]; then
        cat "$temp_file" | copy_to_clipboard
        echo "~$token_estimate tokens"
    elif [ -n "$output_file" ]; then
        cat "$temp_file" > "$output_file"
        echo "~$token_estimate tokens"
    else
        cat "$temp_file"
        echo "~$token_estimate tokens"
    fi

    # Clean up
    rm "$temp_file"
}

# Process files and handle output
process_files "$directory"
